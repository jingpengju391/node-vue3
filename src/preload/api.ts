import { ipcRenderer } from 'electron'
import type { Api } from '@shared/dataModelTypes/api'
import { isMac, isDev, isLinux, isWin } from '@util/process'
// Custom APIs for renderer
const api: Api = {
	isMac,
	isDev,
	isLinux,
	isWin,

	db: {
		insertUserDB: (user) => ipcRenderer.invoke('db:insertUserDB', user),
		deleteUser: (userId) => ipcRenderer.invoke('db:deleteUser', userId),
		updatedUserInfo: (user) => ipcRenderer.invoke('db:updatedUserInfo', user),
		queryUserDB: (id) => ipcRenderer.invoke('db:queryUserDB', id),
		queryLastVisitedUser: () => ipcRenderer.invoke('db:queryLastVisitedUser'),
		queryAllUsersOfWorkspace: (workspaceId) => ipcRenderer.invoke('db:queryAllUsersOfWorkspace', workspaceId),
		queryAllDictOfWorkspace: (workspaceId) => ipcRenderer.invoke('db:queryAllDictOfWorkspace', workspaceId),
		insertDictDB: (dicts) => ipcRenderer.invoke('db:insertDictDB', dicts),
		queryAllOrdersOfWorkspace: (workspaceId) => ipcRenderer.invoke('db:queryAllOrdersOfWorkspace', workspaceId),
		queryAllSubOrdersOfWorkspace: (workspaceId) => ipcRenderer.invoke('db:queryAllSubOrdersOfWorkspace', workspaceId),
		queryAllSubOrderPointsOfWorkspace: (workspaceId) => ipcRenderer.invoke('db:queryAllSubOrderPointsOfWorkspace', workspaceId),
		insertOrdersOfWorkspace: (works) => ipcRenderer.invoke('db:insertOrdersOfWorkspace', works),
		updatePartialWorkOrder: (order) => ipcRenderer.invoke('db:updatePartialWorkOrder', order),
		insertSubOrderOfWorkspace: (subwork) => ipcRenderer.invoke('db:insertSubOrderOfWorkspace', subwork),
		updatePartialSubWorkOrder: (subwork) => ipcRenderer.invoke('db:updatePartialSubWorkOrder', subwork),
		insertSubOrderPointOfWorkspace: (point) => ipcRenderer.invoke('db:insertSubOrderPointOfWorkspace', point),
		updatePartialPointSubWorkOrder: (point) => ipcRenderer.invoke('db:updatePartialPointSubWorkOrder', point),
		queryAllFilesPointsOfWorkspace: (workspaceId) => ipcRenderer.invoke('db:queryAllFilesPointsOfWorkspace', workspaceId),
		insertFilesOfPoint: (files) => ipcRenderer.invoke('db:insertFilesOfPoint', files),
		updatedFilesOfPoint: (files) => ipcRenderer.invoke('db:updatedFilesOfPoint', files)
	},
	process: {
		close: () => ipcRenderer.invoke('process:close'),
		showMainWindow: () => ipcRenderer.invoke('process:showMainWindow'),
		restore: () => ipcRenderer.invoke('process:restore'),
		getBasename: (filePath) => ipcRenderer.invoke('get:basename', filePath),
		minimize: () => ipcRenderer.invoke('process:minimize'),
		maximize: () => ipcRenderer.invoke('process:maximize'),
		desktopCapturer: () => ipcRenderer.invoke('process:desktopCapturer'),
		screenshot: (params) => ipcRenderer.invoke('process:screenshot', params),
		closeScreenshotWindow: () => ipcRenderer.invoke('process:closeScreenshotWindow'),
		screenshotImage: (params) => ipcRenderer.invoke('process:screenshot-image', params),
		scanWifiInformation: () => ipcRenderer.invoke('process:scanWifiInformation'),
		updatedScanCurrentwifi: (params) => ipcRenderer.invoke('process:updatedScanCurrentwifi', params),
		updatedSwitchWithAvailablewifi: (params) => ipcRenderer.invoke('process:updatedSwitchWithAvailablewifi', params),
		disconnectWifi: () => ipcRenderer.invoke('process:disconnectWifi'),
		connectAvailableWifi: (params) => ipcRenderer.invoke('process:connectAvailableWifi', params),
		autoConnectAvailableWifi: (params) => ipcRenderer.invoke('process:autoConnectAvailableWifi', params),
		switchNetwork: (params) => ipcRenderer.invoke('process:switchNetwork', params),
		upgrade: () => ipcRenderer.invoke('process:upgrade'),
		cancelUpgrade: () => ipcRenderer.invoke('process:upgrade:cancel'),
		getDefultNetwork: () => ipcRenderer.invoke('process:getDefultNetwork'),
		handlerDefultNetwork: (DefultNetwork) => ipcRenderer.invoke('process:handlerDefultNetwork', DefultNetwork),
		synchronizeSystemClock: (time) => ipcRenderer.invoke('process:synchronizeSystemClock', time),
		pollInfraredFiles: (mode) => ipcRenderer.invoke('process:pollInfraredFiles', mode),
		stopPollInfraredFiles: () => ipcRenderer.invoke('process:stopPollInfraredFiles'),
		serverConnect: (host, port) => ipcRenderer.invoke('process:server:connect', host, port),
		serverDisconnect: (host, port) => ipcRenderer.invoke('process:server:disconnect', host, port),
		sendDetectData: (work, subwork, points) => ipcRenderer.invoke('process:send:detect:data', work, subwork, points),
		fetchMacAddress: (ip) => ipcRenderer.invoke('process:fetch:mac:address', ip),
		deleteFile: (filePath) => ipcRenderer.invoke('process:delete:file', filePath),
		showOpenWorkspaceDialog: (workId, subWorkId, pointId, detectMethod, mode, workDetailType, workDetailIndex, sensorEid) =>
			ipcRenderer.invoke('dialog:showOpenWorkspaceDialog', workId, subWorkId, pointId, detectMethod, mode, workDetailType, workDetailIndex, sensorEid),
		startTTS: (text: string) => ipcRenderer.invoke('start:text:to:speech', text),
		stopTTS: () => ipcRenderer.invoke('stop:text:to:speech'),
		updatedTTS: (v) => ipcRenderer.invoke('init:text:to:speech', v)
	},
	publish: {},
	http: {
		login: (params) => ipcRenderer.invoke('http:login', params),
		queryPlatformTime: (params) => ipcRenderer.invoke('http:queryPlatformTime', params),
		queryDictionaryEncode: (params) => ipcRenderer.invoke('http:queryDictionaryEncode', params),
		queryWorkOrders: (params) => ipcRenderer.invoke('http:queryWorkOrders', params),
		getPotWorkListHandler: (params) => ipcRenderer.invoke('http:getPotWorkList', params),
		submitPotWorkHandler: (params) => ipcRenderer.invoke('http:submitPotWork', params),
		getPotWorkDetailListHandler: (params) => ipcRenderer.invoke('http:getPotWorkDetailList', params),
		getPotExecListHandler: (params) => ipcRenderer.invoke('http:getPotExecList', params),
		getPotDeviceHandler: () => ipcRenderer.invoke('http:getPotDevice'),
		getPotPositionHisListHandler: (params) => ipcRenderer.invoke('http:getPotPositionHisList', params),
		getPotPositionHisMoreHandler: (params) => ipcRenderer.invoke('http:getPotPositionHisMore', params),
		getWeatherInfoHandler: () => ipcRenderer.invoke('http:getWeatherInfo'),
		getTestUserListHandler: () => ipcRenderer.invoke('http:getTestUserList'),
		submitPotItemHandler: (params) => ipcRenderer.invoke('http:submitPotItem', params),
		submitItemScheduledHandler: (params) => ipcRenderer.invoke('http:submitItemSchedule', params),
		sendDeviceConnectHandler: (params) => ipcRenderer.invoke('http:sendDeviceConnect', params),
		sendPotDeviceQueryHandler: (params) => ipcRenderer.invoke('http:sendPotDeviceQuery', params),
		disConnectPotHandler: (params) => ipcRenderer.invoke('http:disConnectPot', params),
		getPotSyncCountHandler: () => ipcRenderer.invoke('http:getPotSyncCount'),
		assignWorkOrder: (params) => ipcRenderer.invoke('http:assignWorkOrder', params),
		querySubWorkOrders: (params) => ipcRenderer.invoke('http:querySubWorkOrders', params),
		queryRouteplanDetaillist: (params) => ipcRenderer.invoke('http:queryRouteplanDetaillist', params),
		queryDetaillist: (params) => ipcRenderer.invoke('http:queryDetaillist', params),
		adoptSubwork: (params) => ipcRenderer.invoke('http:adoptSubwork', params),
		submitWorkOrder: (params) => ipcRenderer.invoke('http:submitWorkOrder', params)
	}
}

export default api
